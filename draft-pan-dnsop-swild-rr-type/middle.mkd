# Introduction

[](#RFC1034) and [](#RFC4592) described wildcard domain name.

Nowadays wildcard domain is globally used, take "*.github.io" for example, 

    foo.github.io.		     3600	IN	CNAME	sni.github.map.fastly.net.
    sni.github.map.fastly.net. 25	IN	A	    151.101.73.147

Wildcard domain is simple configured on Authoritative Nameserver, but Intermediate Nameservers have to cache various domains (xxx.github.io, yyy.github.io, ... ) of the same wildcard domain configuration, with low cache hit rate, increase cache size.

This document specifies a new SWILD RR type for Intermediate Nameservers to cache subdomain wildcard record, in order to optimize the wildcard domain cache miss, reduce the cache size, and help to defense the DDoS attack.

It is OPT-IN, Intermediate Nameservers can choose not to implement or enable it.

# Terminology

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [](#RFC2119).

Basic terms used in this specification are defined in the documents [](#RFC1034), [](#RFC1035), [](#RFC4592), [](#RFC7719), [](#RFC7871) and [](#RFC8020).

Authoritative Nameserver: Described in [](#RFC1035) Section 6.

Intermediate Nameserver: Described in [](#RFC7871) Section 4.

Recursive Resolver: Described in [](#RFC1035) Section 7. 

Forwarding Resolver: Described in [](#RFC2308) Section 1.  

# The SWILD Resource Record

The presentation format of the SWILD RR is as follows:

       owner ttl class SWILD target

The "target" is a subdomain of the owner, to indicate that all subdomains of the "owner" have the same configuration with the "target".

# Overview 

Special character "_" to indicate the wildcard domain configuration on Intermediate Nameservers, make all the subdomains CNAME to the "_" subdomain, and generate a SWILD RR "_".

If most of Recursive Resolvers support SWILD RR in the future, "_" special character is not strictly used for SWILD target.

Take  "*.foo.com" for example.

## Authoritative Nameserver

Authoritative Nameserver configures the zonefile of "foo.com": 

- add SWILD RR "_" to indicate subdomain wildcard.

- configure "_.foo.com".

- make "*.foo.com" CNAME to "_.foo.com". 

Note that, there is not any other subdomain configured in the "foo.com" zone except "_.foo.com".

    $ORIGIN  foo.com.

    @    86400  IN   SWILD  _
    _     3600  IN   CNAME  map.bar.net.
    *      600  IN   CNAME  _

## Intermediate Nameserver: Recursive Resolver

### Recursive Resolvers that support SWILD RR

Recursive Resolver sends "xxx.foo.com" A RR query to Authoritative Nameserver, get subdomain wildcard response:

    xxx.foo.com.	600	    IN	CNAME	_.foo.com.
    _.foo.com.	   3600	    IN	CNAME	map.bar.net.
    map.bar.net.	600	    IN	A	    202.38.64.10
    foo.com.      86400     IN  SWILD   _.foo.com.

Recursive Resolver knows that SWILD RR is for wildcard domain on recursive side, marks "_.foo.com" as wildcard domains of "*.foo.com".  

In TTL time, if Recursive Resolver receives a "yyy.foo.com" A RR query, it can directly return this subdomain wildcard response:

    yyy.foo.com.	600	    IN	CNAME	_.foo.com.
    _.foo.com.	   3600	    IN	CNAME	map.bar.net.
    map.bar.net.	600	    IN	A	    202.38.64.10
    foo.com.      86400     IN  SWILD   _.foo.com.

### Recursive Resolvers that not support SWILD RR

Recursive Resolver can deal with DNS response as usual.

The next time, Recursive Resolver receives a "yyy.foo.com" A RR query, it can send DNS query to Authoritative Nameserver.

## Intermediate Nameserver: Forwarding Resolvers

Forwarding Resolver sends query to its next-hop Resolver is similar with Recursive Resolver sends query to Authoritative Nameserver.

# DNS Cache

Similar with [](#RFC8198) Section 6, SWILD can reduce latency and decrease server load:

Intermediate Nameservers' cache hit rate will rise, avoid to query Authoritative Nameserver for the same wildcard domain configuration.

Intermediate Nameservers' cache size can be reduced, avoid to cache various domains of the same wildcard domain configuration. 

# DDoS

When Recursive Servers or Second Level Domain(SLD) Authoritative Servers encounter DDoS attack, it will be better for the defense if Recursive Servers know more information.

* SWILD can help Recursive Servers to make a fast correct response when the queires of important subdomain wildcards rise suddenly and sharply, on condition that the source clients are hard to be deprecated.

* SWILD can help Recursive Servers to response the unvisited important subdomain wildcards queries, when the SLD Authoritative Servers encounter an accident which may cause SERVFAIL, TIMEOUT, or hijack responses.

# DNSSEC

Clients and DNSSEC-Enabled Intermediate Nameservers can use DNSSEC to validate all the responses with the Authoritative Nameserver.

DNSSEC-Enabled Intermediate Nameservers can only validate the SWILD RRSIG of "foo.com" and the RRSIGs of "_.foo.com", not need to validate the CNAME RRSIG of "yyy.foo.com".

## Compare to NSEC aggressiveuse wildcard

[](#RFC8198) wildcard could solve similar wildcard problem:

*  NSEC/NSEC3 RR: give "NOT EXIST SUBDOMAIN" information.
*  Cached deduced wildcard: give the default wildcard RR.

SWILD:

*  Directly give "ALL SUBDOMAIN" information, and the default wildcard RR.

SWILD can work with NSEC aggressiveuse wildcard, Authoritative Servers can also return NSEC/NSEC3 RR.

SWILD is applicable even when Authoritative Nameservers don't give NSEC/NSEC3 RR.

SWILD is applicable on non-validating Forwarding Resolvers.

## DNSSEC Deployment

DNSSEC is designed to protect the integrity of DNS responses, avoid package tampering.

How to encourge DNSSEC deployment is an old question, especially on important SLD Authoritative Severs such as google.com, amazon.com.

Defense on domain hjiack such as [](#BankNSHijack) is the biggest motivation to deploy DNSSEC.

NSEC aggressiveuse wildcard or SWILD can not make influnence on DNSSEC deployment, but they solve similar subdomain problem under different DNSSEC deployment prerequisites.

NSEC aggressiveuse wildcard should be dealed more carefully, to avoid flaws such as [](#CVE-2017-15105).

## Hijack Risk

There is concern that SWILD will rise the hijack risk, because it give a response on whole subdomain wildcards, but not a single subdomain.

However, there is similar fatal hijack risk on NS and MX, which is configured for the whole zone.

The hijack influnence of SWILD will not be larger than NS or MX.

## Stub Validation

SWILD does not support directly DNSSEC validation on single subdomain wildcard.

Forwarding Resolvers must trigger a tranditional DNSSEC resolution if they receive a single subdomain wildcard query with DNSSEC validation option from Stub Resolvers.

# Disposable Domain

[](#DNSNoise) found that disposable domains are widely used by various industries, such as Anti-Virus, DNSBLs, CDN, P2P.

They are software-generated subdomains with small target A RRSets, which can be summaried by wildcards for passive DNS databases.

Take [](#McAfeeGTI) for example, *.avqs.mcafee.com's response is from 127.0.0.0/16 network, which is a information about the reputation of the queried file. It can be optimized with a unique NAPTR RR, which can offer an service api of the file reputation information, but not use special A RR definition.

# Acknowledgements

Thanks comments for Tony Finch, Petr Špaček, Matthew Pounsett, Paul Hoffman, Richard Gibson, Paul Vixie, Dave Crocker, Peter van Dijk, Mark Andrews, Vernon Schryver, Ted Lemon, Mukund Sivaraman, Mikael Abrahamsson, Ralf Weber, Davey Song, Warren Kumari.  

Thanks to all in the DNSOP mailing list.
